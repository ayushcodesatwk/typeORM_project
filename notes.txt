ORM => OBJECT RELATIONAL MAPPER (uses OOP concepts to feed into database)

In large enterprise apps flow goes top to bottom like this-

Express (or any backend web app)
    ||
    \/
ORM (typeorm or other)
    ||
    \/
DATABASE DRIVER (postgres, sql etc)


- by default all operations are asynchronous in typeORM
-----------------------------------------------

 relations in typeORM -

 to make one to many relations in typeORM, we use decorators-

 @OneToMany(() => Cart, (cart) => cart.user)
 cart: Cart[]
    
 to make many to one relations in typeORM, we use decorators-

 @ManyToOne(() => Cart, (cart) => cart.user)
 user: User

//making one to many or many to one relation with the product db.
//1st argument- cb with the db we are making connection with, 
//2nd argument- cb which shows in which column of other db, we're going to make relation.

//in the user entity
 @OneToMany(() => Product, (product) => product.user)
 cart: Cart[]

//in the cart entity
 @ManyToOne(() => User, (user) => user.cart)
 user: User

---------------

BUGS OF THE APP-

after filtering out the data we get the data but, 
when we scroll down we get all the remaining products.

after adding the product to the cart from the store page 
we doesn't get the increased number of cart items.

------------------------------

steps that I can take to fix the image url issue----

update & upload all the images to the database in assets to the product database 
as per the title...

--------------------------------

once payment is done-- 
    call an api (createOrder) which will create new order with all the cart items of user,
    (once created clear all the cart items from the cart for the specific user in BE then in FE).
    after that create a new payment using (paymentSuccessful API) with all payment details.
    console.log("Order created successfully", result.data);

--------------------------------

CreateOrder api- 

I have used queryRunner in the createOrder api to create a new order with cart_items and payment.
we start a transaction first and then we create the instance of order and payment and then we commit 
the transaction, 
if any error occurs then we rollback the transaction which means that the order and 
payment will not be created in the database.

--------------------------------

requireAuth middleware-

In the requireAuth middleware or any other middleware, we never use return statement, just send the response
and to attach the userId or any other data to the request object, we can use custom properties by extending it.

--------------------------------